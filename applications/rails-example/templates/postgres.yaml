# Creates a Postgres cluster via the Crunchy Postgres Operator.
#
# By default we create two users. One with the same name as the database which has
# CREATE rights and one readonly user who is only allowed to SELECT. Feel free to
# modify spec.users as you see fit.
#
# Example values.yaml:
# resources:
#   postgres:
#     replicas: 2
#     memory: 1Gi
#     cpu: 1
#     disk: 10Gi
#     # Tip: generate configuration based on CPU / RAM settings at https://pgtune.leopard.in.ua/
#     config:
#       max_connections: 40
#       shared_buffers: 256MB
#       effective_cache_size: 768MB
#       maintenance_work_mem: 64MB
#       checkpoint_completion_target: "0.9"
#       wal_buffers: 7864kB
#       default_statistics_target: "100"
#       random_page_cost: "1.1"
#       effective_io_concurrency: "200"
#       work_mem: 3276kB
#       min_wal_size: 1GB
#       max_wal_size: 4GB
# env:
#   - { name: DATABASE_URL, valueFrom: { secretKeyRef: { name: rails-example-pguser-rails-example, key: uri } } }

apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  name: {{ .Chart.Name }}
spec:
  postgresVersion: 15
  databaseInitSQL:
    key: init.sql
    name: {{ .Chart.Name }}-init-sql
  instances:
    - name: postgres
      replicas: {{ .Values.resources.postgres.replicas }}
      resources:
        requests:
          memory: {{ .Values.resources.postgres.memory }}
          cpu: {{ .Values.resources.postgres.cpu | quote }}
        limits:
          memory: {{ .Values.resources.postgres.memory }}
          cpu: {{ .Values.resources.postgres.cpu | quote }}
      dataVolumeClaimSpec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.resources.postgres.disk }}
      tolerations:
        - key: role
          value: database
          effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/database
                    operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  postgres-operator.crunchydata.com/cluster: {{ .Chart.Name }}
                  postgres-operator.crunchydata.com/data: postgres
  users:
    - name: {{ .Chart.Name }}
      password:
        type: AlphaNumeric
      databases:
        - {{ .Chart.Name }}
    - name: readonly
      password:
        type: AlphaNumeric
      databases:
        - {{ .Chart.Name }}
  patroni:
    switchover:
      enabled: true
    dynamicConfiguration:
      postgresql:
        parameters: {{ .Values.resources.postgres.config | toYaml | nindent 10 }}
        pg_hba: ["host all all all md5"] # allow non SSL connections for k pg:proxy
  monitoring:
    pgmonitor:
      exporter:
        image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-exporter:ubi8-5.3.0-0
  backups:
    pgbackrest:
      global:
        repo1-retention-full: "28"
        repo1-retention-full-type: time
        repo1-path: /pgo/{{ .Chart.Name }}/repo1
      repos:
        - name: repo1
          volume:
            volumeClaimSpec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: {{ .Values.resources.postgres.disk }}
      #   - name: repo2
      #     schedules:
      #       full: "0 1 * * 0" # At 01:00 on Sunday
      #       differential: "0 1 * * 1-6" # At 01:00 Monday through Saturday
      #     s3:
      #       bucket: devops-kubernetes-backups
      #       endpoint: s3.eu-north-1.amazonaws.com
      #       region: eu-north-1
      # configuration:
      #   - secret:
      #       name: pgbackrest-aws-credentials
---
# Give CREATE privilege on the public schema to allow Postgres 15 to work as previous versions
# Give SELECT privilege to the readonly user for tables created by the default database user
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-init-sql
data:
  init.sql: |
    \set ON_ERROR_STOP
    \echo "Executing init.sql"

    \c {{ .Chart.Name }}
    GRANT CREATE ON SCHEMA public TO "{{ .Chart.Name }}";
    REVOKE CREATE ON DATABASE "{{ .Chart.Name }}" FROM readonly;
    ALTER DEFAULT PRIVILEGES FOR USER "{{ .Chart.Name }}" IN SCHEMA public GRANT SELECT ON TABLES TO "readonly";
